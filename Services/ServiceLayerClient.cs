using System;using System.Net.Http;using System.Text;using System.Text.Json;using System.Threading.Tasks;using EnviadorPagosWPF.Models;using EnviadorPagosWPF.Utils;namespace EnviadorPagosWPF.Services;public class ServiceLayerClient:IDisposable{private readonly AppConfig _cfg;private readonly HttpClient _http;public ServiceLayerClient(AppConfig cfg){_cfg=cfg;var handler=_cfg.ServiceLayer.IgnoreSelfSignedCertificates?CertificateHelper.CreatePermissiveHandler():new HttpClientHandler();_http=new HttpClient(handler){BaseAddress=new Uri(_cfg.ServiceLayer.BaseUrl.TrimEnd('/')+"/")};}public async Task LoginAsync(string companyDb,string user,string pass){var payload=new{CompanyDB=companyDb,UserName=user,Password=pass};var res=await _http.PostAsync("Login",new StringContent(JsonSerializer.Serialize(payload),Encoding.UTF8,"application/json"));if(!res.IsSuccessStatusCode)throw new InvalidOperationException("Login SL fall√≥: "+(int)res.StatusCode+" "+res.ReasonPhrase+"\n"+await res.Content.ReadAsStringAsync());}public async Task LogoutAsync(){try{await _http.PostAsync("Logout",new StringContent(""));}catch{}}public async Task<string> GetAsync(string rel){var r=await _http.GetAsync(rel);var t=await r.Content.ReadAsStringAsync();if(!r.IsSuccessStatusCode)throw new InvalidOperationException("GET "+rel+" => "+(int)r.StatusCode+" "+r.ReasonPhrase+"\n"+t);return t;}public async Task PatchAsync(string rel,object body){var req=new HttpRequestMessage(new HttpMethod("PATCH"),rel){Content=new StringContent(JsonSerializer.Serialize(body),Encoding.UTF8,"application/json")};var r=await _http.SendAsync(req);var t=await r.Content.ReadAsStringAsync();if(!r.IsSuccessStatusCode)throw new InvalidOperationException("PATCH "+rel+" => "+(int)r.StatusCode+" "+r.ReasonPhrase+"\n"+t);}public async Task<bool> ProbeAsync(string rel){try{var r=await _http.GetAsync(rel);return r.IsSuccessStatusCode;}catch{return false;}}public void Dispose()=>_http.Dispose();}
