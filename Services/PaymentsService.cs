using System;using System.Collections.Generic;using System.Globalization;using System.IO;using System.Linq;using System.Text.Json;using System.Threading.Tasks;using EnviadorPagosWPF.Models;namespace EnviadorPagosWPF.Services;public class PaymentsService
{
private readonly ServiceLayerClient _sl;public PaymentsService(ServiceLayerClient sl)=>_sl=sl;private string? _entity;private string? _cancelProp;private HashSet<string>? _fields;private static string DateIso(DateTime d)=>d.ToString("yyyy-MM-dd",CultureInfo.InvariantCulture);private async Task<string> EnsureEntityAsync(){if(!string.IsNullOrEmpty(_entity))return _entity!;if(await _sl.ProbeAsync("VendorPayments?$top=1"))_entity="VendorPayments";else if(await _sl.ProbeAsync("Payments?$top=1"))_entity="Payments";else throw new InvalidOperationException("Service Layer: no hay entity set para pagos.");return _entity!;}private async Task<string> EnsureCancelPropAsync(){if(_cancelProp!=null)return _cancelProp!;var e=await EnsureEntityAsync();if(await _sl.ProbeAsync(e+"?$filter=Cancelled eq 'tNO'&$top=1"))_cancelProp="Cancelled";else if(await _sl.ProbeAsync(e+"?$filter=Canceled eq 'tNO'&$top=1"))_cancelProp="Canceled";else _cancelProp="";return _cancelProp!;}

    private async Task<string> EnsureDocTypeFilterAsync()
    {
        var e = await EnsureEntityAsync();
        // Return a snippet like " and DocType eq 'rSupplier'" or empty if not supported
        if (await _sl.ProbeAsync($"{e}?$filter=DocType eq 'rSupplier'&$top=1"))
            return " and DocType eq 'rSupplier'";
        if (await _sl.ProbeAsync($"{e}?$filter=DocType eq 'S'&$top=1"))
            return " and DocType eq 'S'";
        return string.Empty;
    }
private async Task<HashSet<string>> EnsureFieldsAsync(){if(_fields!=null)return _fields!;var e=await EnsureEntityAsync();var cand=new[]{"DocEntry","DocNum","DocDate","CardCode","CardName","DocCurrency","DocTotal","DocTotalFC","AttachmentEntry","U_CFDI33_EMAIL","U_CFDI33_LOGEMAIL","CashSum","CheckSum","TransferSum"};var ok=new HashSet<string>(StringComparer.OrdinalIgnoreCase);for(int i=0;i<cand.Length;i+=4){var slice=cand.Skip(i).Take(4).ToArray();var sel=string.Join(",",slice);if(await _sl.ProbeAsync(e+"?$select="+sel+"&$top=1"))foreach(var f in slice)ok.Add(f);else foreach(var f in slice)if(await _sl.ProbeAsync(e+"?$select="+f+"&$top=1"))ok.Add(f);}ok.Add("DocEntry");ok.Add("DocNum");ok.Add("DocDate");ok.Add("CardCode");ok.Add("CardName");_fields=ok;return _fields!;}public async Task<List<PaymentRow>> GetVendorPaymentsAsync(DateTime from,DateTime toIncl){var e=await EnsureEntityAsync();var cancel=await EnsureCancelPropAsync();var fields=await EnsureFieldsAsync();var prefer=new[]{"DocEntry","DocNum","DocDate","CardCode","CardName","DocCurrency","DocTotal","DocTotalFC","AttachmentEntry","U_CFDI33_EMAIL","U_CFDI33_LOGEMAIL","CashSum","CheckSum","TransferSum"};var select="$select="+string.Join(",",prefer.Where(f=>fields.Contains(f)));var filter=string.IsNullOrEmpty(cancel)?"$filter=DocDate ge '"+DateIso(from)+"' and DocDate le '"+DateIso(toIncl)+"'":"$filter="+cancel+" eq 'tNO' and DocDate ge '"+DateIso(from)+"' and DocDate le '"+DateIso(toIncl)+"'";var url=e+"?"+select+"&"+filter+"&$orderby=DocDate desc";var json=await _sl.GetAsync(url);using var doc=JsonDocument.Parse(json);var arr=doc.RootElement.GetProperty("value");var list=new List<PaymentRow>();foreach(var it in arr.EnumerateArray()){var p=new PaymentRow();if(it.TryGetProperty("DocEntry",out var v))p.DocEntry=v.GetInt32();if(it.TryGetProperty("DocNum",out v))p.DocNum=v.GetInt32();if(it.TryGetProperty("DocDate",out v))p.DocDate=v.GetDateTime();if(it.TryGetProperty("CardCode",out v))p.CardCode=v.GetString()??"";if(it.TryGetProperty("CardName",out v))p.CardName=v.GetString()??"";if(it.TryGetProperty("DocCurrency",out v))p.DocCurrency=v.GetString()??"MXN";if(it.TryGetProperty("U_CFDI33_EMAIL",out v))p.StatusEmail=v.GetString()??"";if(it.TryGetProperty("U_CFDI33_LOGEMAIL",out v))p.StatusLog=v.GetString()??"";if(it.TryGetProperty("CashSum",out v))p.CashSum=v.GetDecimal();if(it.TryGetProperty("CheckSum",out v))p.CheckSum=v.GetDecimal();if(it.TryGetProperty("TransferSum",out v))p.TransferSum=v.GetDecimal();if(it.TryGetProperty("DocTotal",out v))p.DocTotal=v.GetDecimal();else p.DocTotal=p.CashSum+p.CheckSum+p.TransferSum;if(it.TryGetProperty("DocTotalFC",out v))p.DocTotalFC=v.GetDecimal();if(it.TryGetProperty("AttachmentEntry",out v)&&v.ValueKind!=System.Text.Json.JsonValueKind.Null)p.AttachmentPath=await GetFirstAttachmentPathAsync(v.GetInt32());p.EmailTo=await GetBpEmailAsync(p.CardCode);p.Invoices=await GetPaymentInvoicesAsync(p.DocEntry);list.Add(p);}return list;}private async Task<string> GetBpEmailAsync(string cardCode)
    {
        if (string.IsNullOrWhiteSpace(cardCode))
            return string.Empty;
        var j = await _sl.GetAsync("BusinessPartners('" + Uri.EscapeDataString(cardCode) + "')?$select=CardCode,U_CORPAG");
        using var d = System.Text.Json.JsonDocument.Parse(j);
        return d.RootElement.TryGetProperty("U_CORPAG", out var v) ? (v.GetString() ?? "") : "";
    }private async Task<List<PaymentInvoice>> GetPaymentInvoicesAsync(int paymentDocEntry){var e=await EnsureEntityAsync();var cand=new[]{"DocEntry","DocNum","DocDate","NumAtCard","DocCurrency","DocTotal","DocTotalFC"};var ok=new HashSet<string>(StringComparer.OrdinalIgnoreCase);for(int i=0;i<cand.Length;i+=3){var slice=cand.Skip(i).Take(3).ToArray();var sel=string.Join(",",slice);if(await _sl.ProbeAsync("PurchaseInvoices?$select="+sel+"&$top=1"))foreach(var f in slice)ok.Add(f);else foreach(var f in slice)if(await _sl.ProbeAsync("PurchaseInvoices?$select="+f+"&$top=1"))ok.Add(f);}ok.Add("DocEntry");ok.Add("DocNum");ok.Add("DocDate");var selectInv="$select="+string.Join(",",cand.Where(f=>ok.Contains(f)));var baseJson=await _sl.GetAsync(e+"("+paymentDocEntry+")?$select=DocEntry,PaymentInvoices");using var baseDoc=JsonDocument.Parse(baseJson);var lines=baseDoc.RootElement.TryGetProperty("PaymentInvoices",out var val)?val:default;var list=new List<PaymentInvoice>();if(lines.ValueKind!=System.Text.Json.JsonValueKind.Array)return list;foreach(var ln in lines.EnumerateArray()){var invEntry=ln.GetProperty("DocEntry").GetInt32();var sumApplied=ln.GetProperty("SumApplied").GetDecimal();var invJson=await _sl.GetAsync("PurchaseInvoices("+invEntry+")?"+selectInv);using var invDoc=JsonDocument.Parse(invJson);var r=invDoc.RootElement;var s=new PaymentInvoice();s.DocEntry=r.TryGetProperty("DocEntry",out var x)?x.GetInt32():invEntry;s.DocNum=r.TryGetProperty("DocNum",out x)?x.GetInt32():0;s.DocDate=r.TryGetProperty("DocDate",out x)?x.GetDateTime():DateTime.MinValue;s.NumAtCard=r.TryGetProperty("NumAtCard",out x)?(x.GetString()??""):"";s.DocCurrency=r.TryGetProperty("DocCurrency",out x)?(x.GetString()??"MXN"):"MXN";s.DocTotal=r.TryGetProperty("DocTotal",out x)?x.GetDecimal():0m;s.DocTotalFC=r.TryGetProperty("DocTotalFC",out x)?x.GetDecimal():0m;s.SumApplied=sumApplied;list.Add(s);}return list;}private async Task<string?> GetFirstAttachmentPathAsync(int attachmentEntry){var json=await _sl.GetAsync("Attachments2("+attachmentEntry+")?$select=Attachments2_Lines");using var doc=JsonDocument.Parse(json);if(!doc.RootElement.TryGetProperty("Attachments2_Lines",out var lines)||lines.ValueKind!=System.Text.Json.JsonValueKind.Array)return null;foreach(var ln in lines.EnumerateArray()){var path=(ln.GetProperty("SourcePath").GetString()??string.Empty).TrimEnd(System.IO.Path.DirectorySeparatorChar,System.IO.Path.AltDirectorySeparatorChar);var file=ln.GetProperty("FileName").GetString()??string.Empty;if(!string.IsNullOrWhiteSpace(path)&&!string.IsNullOrWhiteSpace(file))return System.IO.Path.Combine(path,file);}return null;}public async Task UpdateEmailStatusAsync(int docEntry,bool ok,string log){var body=new{U_CFDI33_EMAIL=ok?"S":"E",U_CFDI33_LOGEMAIL=log};var e=await EnsureEntityAsync();await _sl.PatchAsync(e+"("+docEntry+")",body);} }
